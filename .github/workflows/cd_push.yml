name: Workflow for building and deploying containers in argocd

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      argocd_app_name:
        required: true
        type: string
      deploy_dirs:
        required: false
        type: string
        default: '["deploy"]'
      dockle_whitelist:
        required: false
        type: string
        default: ""

jobs:
  build:
    runs-on: [self-hosted, ubuntu20.04-self]
    steps:
      # Setup
      - uses: actions/checkout@v3

      # we need to replace `/` in the branch name with `-` to make it compatible with docker registry tags
      - name: serialize branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${{ github.ref_name }} | sed 's/\//-/g')"
        id: serialize_branch

      # Build Docker images
      - name: Build image using docker-build action
        uses: GETProtocolLab/docker-build-action@v1.0.4
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          image: ${{ inputs.image }}
          tag: ${{ steps.serialize_branch.outputs.branch }}
          build_args: |
            REPO_AUTH=${{ secrets.GH_ACCESS_TOKEN }}
          extra_tags: |
            ${{ inputs.image }}:${{ github.sha }}

      # Only triggers if this job fails
      - name: Failure Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: failure() && (github.ref_name  == 'development' || github.ref_name  == 'master' || github.ref_name  == 'production')
        env:
          SLACK_CHANNEL: taas-dev
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            Build job on *${{ github.ref_name }}* has failed for ${{ github.repository }}
          SLACK_TITLE: Build Failed
          SLACK_USERNAME: github-actions-status
          SLACK_WEBHOOK: ${{ secrets.FAILURE_SLACK_WEBHOOK }}
          SLACK_ICON: https://github.com/GETProtocolLab.png?size=48

  update-kustomize:
    runs-on: [self-hosted, ubuntu20.04-self]
    needs: build
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    if: github.ref_name  == 'development' || github.ref_name  == 'master' || github.ref_name  == 'production' || github.ref_name  == 'feature/multiple-clusters'
    steps:
      - name: Select overlay
        shell: bash
        run: |
          if [ "$GIT_REF" == "development" ] || [ "$GIT_REF" == "feature/multiple-clusters" ]; then
            echo ::set-output name=overlay::overlays/euc1-testing
          elif [ "$GIT_REF" == "master" ]; then
            echo ::set-output name=overlay::overlays/euc1-staging
          elif [ "$GIT_REF" == "production" ]; then
            echo ::set-output name=overlay::overlays/euc1
          fi
        env:
          GIT_REF: ${{ github.ref_name }}

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.WORKFLOWS_GITHUB_APP_ID }}
          private_key: ${{ secrets.WORKFLOWS_GITHUB_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
      - uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "4.4.0"

      - name: Update overlay with new image tag
        run: |
          jq '.[]' -r <<< $DEPLOY_DIRS | while read i; do
            cd $i/$TARGET
            kustomize edit set image $IMAGE=:$TAG
            cat kustomization.yml
          done
        shell: bash
        env:
          TARGET: ${{ steps.argocd.outputs.overlay }}
          IMAGE: ${{ inputs.image }}
          TAG: ${{ github.sha }}
          DEPLOY_DIRS: ${{ inputs.deploy_dirs }}

      - uses: actionsx/prettier@v2
        with:
          args: --write ${{ steps.argocd.outputs.overlay }}/kustomization.yml

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "[skip ci] Deploy ${{ github.ref_name }} (${{ github.sha }}) to ${{ steps.argocd.outputs.overlay }}"
  deploy-argocd:
    runs-on: [self-hosted, ubuntu20.04-self]
    needs: "update-kustomize"
    strategy:
      fail-fast: false
      matrix:
        DEPLOY_DIR: ${{ fromJSON(inputs.deploy_dirs) }}
    steps:
      - id: argocd
        shell: bash
        run: |
          if [ "$GIT_REF" == "development" ] || [ "$GIT_REF" == "feature/multiple-clusters" ]; then
            echo ::set-output name=server-url::argocd.euc1.t.get-protocol.dev
            echo ::set-output name=token::$EUC1TESTING_TOKEN
            echo ::set-output name=overlay::$DEPLOY_DIR/overlays/euc1-testing
          elif [ "$GIT_REF" == "master" ]; then
            echo ::set-output name=server-url::argocd.euc1.s.get-protocol.dev
            echo ::set-output name=token::$EUC1STAGING_TOKEN
            echo ::set-output name=overlay::$DEPLOY_DIR/overlays/euc1-staging
          elif [ "$GIT_REF" == "production" ]; then
            echo ::set-output name=server-url::argocd.euc1.get-protocol.cloud
            echo ::set-output name=token::$EUC1_TOKEN
            echo ::set-output name=overlay::$DEPLOY_DIR/overlays/euc1
          fi
        env:
          GIT_REF: ${{ github.ref_name }}
          EUC1TESTING_TOKEN: ${{ secrets.ARGOCD_EUC1TESTING_API_AUTH }}
          EUC1STAGING_TOKEN: ${{ secrets.ARGOCD_EUC1STAGING_API_AUTH }}
          EUC1_TOKEN: ${{ secrets.ARGOCD_EUC1_API_AUTH }}
          DEPLOY_DIR: ${{ matrix.DEPLOY_DIR }}

      - run: docker run argoproj/argocd argocd app sync ${{ inputs.argocd_app_name }} --grpc-web --server $SERVER --auth-token $AUTH_TOKEN --prune
        env:
          SERVER: ${{ steps.argocd.outputs.server-url }}
          AUTH_TOKEN: ${{ steps.argocd.outputs.token }}

      # Only triggers if this job fails
      - name: Failure Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ failure() }}
        env:
          SLACK_CHANNEL: taas-dev
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            Deploy job on *${{ github.ref_name }}* has failed for ${{ github.repository }}
          SLACK_TITLE: Deployment Failed
          SLACK_USERNAME: github-actions-status
          SLACK_WEBHOOK: ${{ secrets.FAILURE_SLACK_WEBHOOK }}
          SLACK_ICON: https://github.com/GETProtocolLab.png?size=48

  dockle-lint:
    runs-on: [self-hosted, ubuntu20.04-self]
    needs: build
    if: github.ref_name != 'development' && github.ref_name != 'master' && github.ref_name != 'production'
    steps:
      - name: Log in to GitHub Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Run security checks on latest image built
      - name: Dockle Security Check
        uses: erzz/dockle-action@v1
        with:
          image: ${{ inputs.image }}:${{ github.sha }}
          failure-threshold: fatal
          exit-code: 1 # Stops pipeline if fatal issues found
          accept-filenames: ${{ inputs.dockle_whitelist }}
