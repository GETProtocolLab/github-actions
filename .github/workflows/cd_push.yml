name: Workflow for building and deploying containers in argocd

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      argocd_app_name:
        required: true
        type: string
      dockle_whitelist:
        required: false
        type: string
        default: ""

jobs:
  build:
    runs-on: [self-hosted, ubuntu20.04-self]
    steps:
      # Setup
      - uses: actions/checkout@v3

      # we need to replace `/` in the branch name with `-` to make it compatible with docker registry tags
      - name: serialize branch name
        shell: bash
        run: echo "branch=$(echo ${{ github.ref_name }} | sed 's/\//-/g')" >> $GITHUB_OUTPUT
        id: serialize_branch

      # Docker images
      - name: Build image using docker-build action
        uses: GETProtocolLab/docker-build-action@master
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          image: ${{ inputs.image }}
          tag: ${{ steps.serialize_branch.outputs.branch }}
          build_args: |
            REPO_AUTH=${{ secrets.GH_ACCESS_TOKEN }}
          extra_tags: |
            ${{ inputs.image }}:${{ github.sha }}

  deploy-argocd:
    runs-on: [self-hosted, ubuntu20.04-self]
    needs: build
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true
    if: github.ref_name  == 'development' || github.ref_name  == 'master' || github.ref_name  == 'production'
    steps:
      - id: argocd
        shell: bash
        run: |
          if [ "$GIT_REF" == "development" ]; then
            echo "server-url=argocd.euc1.t.get-protocol.dev" >> $GITHUB_OUTPUT
            echo "token=$EUC1TESTING_TOKEN" >> $GITHUB_OUTPUT
            echo "overlay=deploy/overlays/euc1-testing" >> $GITHUB_OUTPUT
          elif [ "$GIT_REF" == "master" ]; then
            echo "server-url=argocd.euc1.s.get-protocol.dev" >> $GITHUB_OUTPUT
            echo "token=$EUC1STAGING_TOKEN" >> $GITHUB_OUTPUT
            echo "overlay=deploy/overlays/euc1-staging" >> $GITHUB_OUTPUT
          elif [ "$GIT_REF" == "production" ]; then
            echo "server-url=argocd.euc1.get-protocol.cloud" >> $GITHUB_OUTPUT
            echo "token=$EUC1_TOKEN" >> $GITHUB_OUTPUT          
            echo "overlay=deploy/overlays/euc1" >> $GITHUB_OUTPUT          
          fi
        env:
          GIT_REF: ${{ github.ref_name }}
          EUC1TESTING_TOKEN: ${{ secrets.ARGOCD_EUC1TESTING_API_AUTH }}
          EUC1STAGING_TOKEN: ${{ secrets.ARGOCD_EUC1STAGING_API_AUTH }}
          EUC1_TOKEN: ${{ secrets.ARGOCD_EUC1_API_AUTH }}

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.WORKFLOWS_GITHUB_APP_ID }}
          private_key: ${{ secrets.WORKFLOWS_GITHUB_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
      - uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "4.4.0"

      - name: Update overlay with new image tag
        run: |
          cd $TARGET
          kustomize edit set image $IMAGE=:$TAG
          cat kustomization.yml
        shell: bash
        env:
          TARGET: ${{ steps.argocd.outputs.overlay }}
          IMAGE: ${{ inputs.image }}
          TAG: ${{ github.sha }}

      - uses: actionsx/prettier@master
        with:
          args: --write ${{ steps.argocd.outputs.overlay }}/kustomization.yml

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "[skip ci] Deploy ${{ github.ref_name }} (${{ github.sha }}) to ${{ steps.argocd.outputs.overlay }}"

      - run: docker run argoproj/argocd argocd app sync -l app.kubernetes.io/name=${{ inputs.argocd_app_name }} --grpc-web --server $SERVER --auth-token $AUTH_TOKEN --prune
        env:
          SERVER: ${{ steps.argocd.outputs.server-url }}
          AUTH_TOKEN: ${{ steps.argocd.outputs.token }}

  dockle-lint:
    runs-on: [self-hosted, ubuntu20.04-self]
    needs: build
    if: github.ref_name != 'development' && github.ref_name != 'master' && github.ref_name != 'production'
    steps:
      - name: Log in to GitHub Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Run security checks on latest image built
      - name: Dockle Security Check
        uses: erzz/dockle-action@v1
        with:
          image: ${{ inputs.image }}:${{ github.sha }}
          failure-threshold: fatal
          exit-code: 1 # Stops pipeline if fatal issues found
          accept-filenames: ${{ inputs.dockle_whitelist }}
