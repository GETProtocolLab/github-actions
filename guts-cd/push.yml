name: "guts-cd-push"
description: "This action will build and deploy images in the guts infrastructure"
inputs:
  # Docker inputs
  docker_registry:
    description: "Registry's host"
    required: false
    default: "ghcr.io"
  docker_user:
    description: "Registry's user"
    required: false
    default: ${{ github.actor }}
  docker_password:
    description: "Registry user's password or token"
    required: true
  docker_image:
    description: "Docker image name without tag"
    required: true
  docker_tag:
    description: "Docker image tag"
    required: true
  docker_build_args:
    description: "Environment variables passed to docker build"
    required: false
  docker_extra_tags:
    description: "Additional tags, needs the full version of tags with image name"
    required: false

  # Argocd general
  argocd_server:
    description: "the url of the argocd server to use"
    required: true
  argocd_euc1_testing_token:
    description: "The token to authenticate to argocd server"
    required: true
  argocd_euc1_staging_token:
    description: "The token to authenticate to argocd server"
    required: true
  argocd_euc1_token:
    description: "The token to authenticate to argocd server"
    required: true
  # Argocd deploy
  overlay:
    description: "the kustomize directory to deploy"
    required: true
  image:
    description: "the image that should be updated"
    required: true
  argocd_app:
    description: "The app to sync"
    required: true

runs:
  using: "composite"
  steps:
    - uses: ../docker-build
      with:
        registry: ${{ inputs.docker_registry }}
        user: ${{ inputs.docker_user }}
        password: ${{ inputs.docker_password }}
        image: ${{ inputs.docker_image }}
        tag: ${{ inputs.docker_tag }}
        build_args: ${{ inputs.docker_build_args }}
        extra_tags: ${{ inputs.docker_extra_tags }}

    - id: argocd
      shell: bash
      if: github.ref_name  == 'development' || github.ref_name  == 'master' || github.ref_name  == 'production'
      run: |
        if [ "$GIT_REF" == "development" ]; then
          echo ::set-output name=server-url::argocd.euc1.t.get-protocol.dev
          echo ::set-output name=token::$EUC1TESTING_TOKEN
          echo ::set-output name=overlay::deploy/overlays/euc1-testing
        elif [ "$GIT_REF" == "master" ]; then
          echo ::set-output name=server-url::argocd.euc1.s.get-protocol.dev
          echo ::set-output name=token::$EUC1STAGING_TOKEN
          echo ::set-output name=overlay::deploy/overlays/euc1-staging
        elif [ "$GIT_REF" == "production" ]; then
          echo ::set-output name=server-url::argocd.euc1.get-protocol.cloud
          echo ::set-output name=token::$EUC1_TOKEN
          echo ::set-output name=overlay::deploy/overlays/euc1
        fi
      env:
        GIT_REF: ${{ github.ref_name }}
        EUC1TESTING_TOKEN: ${{ inputs.argocd_euc1_testing_token }}
        EUC1STAGING_TOKEN: ${{ inputs.argocd_euc1_staging_token  }}
        EUC1_TOKEN: ${{ inputs.argocd_euc1_token  }}

    - uses: ../argocd-deploy
      if: github.ref_name  == 'development' || github.ref_name  == 'master' || github.ref_name  == 'production'
      with:
        image: ${{ inputs.image }}
        image_tag: ${{ github.sha }}
        overlay: ${{ steps.argocd.outputs.overlay }}
        argocd_server: ${{ steps.argocd.outputs.server-url }}
        argocd_token: ${{ steps.argocd.outputs.token }}
        argocd_app: ${{ inputs.argocd_app }}
